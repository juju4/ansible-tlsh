---

- name: Ensure git is present
  ansible.builtin.package:
    name: git
    state: present

- name: Git clone TrendMicro TLSH
  ansible.builtin.git:
    repo: https://github.com/trendmicro/tlsh.git
    dest: "{{ toolsetdir }}/tlsh"
    version: "{{ tlsh_version }}"
    update: "{{ tlsh_git_update | default('no') }}"
    force: "no"

- name: Check if tlsh binary exists
  ansible.builtin.stat:
    path: "/usr/local/bin/tlsh"
  register: tlsh

- name: RedHat8+ | Check available repo
  ansible.builtin.command: ls /etc/yum.repos.d/
  changed_when: false
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8
- name: RedHat8+ | Enable PowerTools repo
  community.general.ini_file:
    dest: "{{ tlsh_redhat_powertools_repofile }}"
    section: powertools
    option: enabled
    value: '1'
    mode: '0644'
    create: no
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8

- name: RedHat8+ | Ensure libarchive is present - cmake archive_write_add_filter_zstd undefined symbol
  ansible.builtin.package:
    name: libarchive
    state: present
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version | int >= 8

- name: TLSH dependencies
  ansible.builtin.package:
    name: "{{ tlsh_build_deps }}"
    state: present
  register: pkg_result
  until: pkg_result is success

# Change to CMakeLists.txt ?
- name: Ensure Shared library setting as defined
  ansible.builtin.replace:
    dest: "{{ toolsetdir }}/tlsh/src/CMakeLists.txt"
    regexp: '^set\(TLSH_SHARED_LIBRARY .*\)'
    replace: "set(TLSH_SHARED_LIBRARY {% if tlsh_shared_lib %}1{% else %}0{% endif %})"
    mode: '0644'
    backup: yes

- name: TLSH build
  ansible.builtin.command: "./make.sh"
  args:
    chdir: "{{ toolsetdir }}/tlsh"
    creates: "{{ toolsetdir }}/tlsh/lib/libtlsh.a"
  register: build
#  failed_when: "' Error ' in build.stderr"

- name: System python
  when: tlsh_virtualenv_path is not defined or not tlsh_virtualenv_path
  block:
    - name: Setup.py | TLSH Python bindings
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ toolsetdir }}/tlsh/py_ext"
        creates: "{{ tlsh_python_bindings }}"
      with_items:
        - "{{ tlsh_python_bin }} setup.py build"
        - "{{ tlsh_python_bin }} setup.py install"
      when: >
        not ((ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 24) or
          (ansible_distribution == 'Debian' and ansible_distribution_major_version|int == 12)
        )
    - name: Pip | TLSH Python bindings  # PEP 632
      ansible.builtin.command: "{{ tlsh_python_pip | default('pip3') }} install ."
      args:
        chdir: "{{ toolsetdir }}/tlsh/py_ext"
        creates: "{{ tlsh_python_bindings }}"
      when: >
        ((ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 24) or
          (ansible_distribution == 'Debian' and ansible_distribution_major_version|int == 12)
        )
    - name: Pip | Build TLSH Python bindings - virtualenv

- name: Virtualenv python
  when: tlsh_virtualenv_path is defined and tlsh_virtualenv_path
  block:
    - name: Virtualenv dependencies
      ansible.builtin.package:
        name: "{{ item }}"
        state: "present"
      with_items: "{{ tlsh_python_pkgs | default(['python-virtualenv', 'python-pip']) }}"
      register: pkg_result
      until: pkg_result is success
    # if user exists with running process, usermod can't edit it and fails
    - name: Check if virtualenv user exists - {{ tlsh_virtualenv_user }}
      ansible.builtin.command: "grep {{ tlsh_virtualenv_user }} /etc/passwd"
      changed_when: false
      ignore_errors: true
      register: haveuser
    - name: Ensure virtualenv user exists - {{ tlsh_virtualenv_user }}
      ansible.builtin.user:
        name: "{{ tlsh_virtualenv_user }}"
        home: "{{ tlsh_virtualenv_home }}"
        state: present
      when: haveuser is failed and tlsh_virtualenv_user != 'root' and tlsh_virtualenv_user != 'nobody' and tlsh_virtualenv_user != 'www-data'
    - name: Check if binding exists
      ansible.builtin.stat:
        path: "{{ tlsh_python_bindings }}"
      register: tlshso
    - name: Ensure directories ownership if needed, like pip cache
      ansible.builtin.file:
        dest: "{{ item.d }}"
        state: "{{ item.s }}"
        mode: "{{ item.m }}"
        owner: "{{ item.o }}"
      with_items: "{{ tlsh_ownership | default([]) }}"
    - name: Setup.py | Build TLSH Python bindings - virtualenv
      ansible.builtin.command: "{{ item.c }}"
      args:
        chdir: "{{ item.d }}"
        creates: "{{ item.t }}"
      with_items:
        - { c: "virtualenv -p {{ tlsh_python_bin }} {{ tlsh_virtualenv_path }}",
            d: "{{ tlsh_virtualenv_home }}",
            t: "{{ tlsh_virtualenv_path }}"
        }
        - { c: "{{ tlsh_virtualenv_path }}/bin/{{ tlsh_python_bin }} setup.py install",
            d: "{{ toolsetdir }}/tlsh/py_ext",
            t: "{{ tlsh_python_bindings | regex_replace('/usr/local', tlsh_virtualenv_path) }}"
        }
      become: yes
      become_user: "{{ tlsh_virtualenv_user }}"
      when: >
        not ((ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 24) or
          (ansible_distribution == 'Debian' and ansible_distribution_major_version|int == 12)
        )
    - name: Pip | Build TLSH Python bindings - virtualenv
      ansible.builtin.command: "{{ item.c }}"
      args:
        chdir: "{{ item.d }}"
        creates: "{{ item.t }}"
      with_items:
        - { c: "virtualenv -p {{ tlsh_python_bin }} {{ tlsh_virtualenv_path }}",
            d: "{{ tlsh_virtualenv_home }}",
            t: "{{ tlsh_virtualenv_path }}"
        }
        - { c: "{{ tlsh_virtualenv_path }}/bin/pip install .",
            d: "{{ toolsetdir }}/tlsh/py_ext",
            t: "{{ tlsh_python_bindings | regex_replace('/usr/local', tlsh_virtualenv_path) }}"
        }
      become: yes
      become_user: "{{ tlsh_virtualenv_user }}"
      when: >
        ((ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int == 24) or
          (ansible_distribution == 'Debian' and ansible_distribution_major_version|int == 12)
        )
